from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hide_link
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, F, Router
import asyncio
import logging
import sqlite3
import sys
import re
from keyboards.keyboards_admins import *
from keyboards.keyboards_user import *
from db import init_db, add_application, add_reply, get_application_data
from states import *
from utils import *
from config import *

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
storage = MemoryStorage()
dp.fsm_storage = storage
router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
applications = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()


# START
@dp.message(Command("start"))
async def handleStart(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_id = message.from_user.id
    is_admin = user_id == ADMIN_ID[0] if ADMIN_ID and isinstance(ADMIN_ID[0], int) else False

    if is_admin:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöó –í—ã—Å—Ç–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="car"),
             InlineKeyboardButton(text="üì¶ –ü–µ—Ä–µ–≤–µ–∑—Ç–∏ –≥—Ä—É–∑", callback_data="cargo")],
            [InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å/–∏—Å–∫–∞—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="search_orders")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöó –í—ã—Å—Ç–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="car"),
             InlineKeyboardButton(text="üì¶ –ü–µ—Ä–µ–≤–µ–∑—Ç–∏ –≥—Ä—É–∑", callback_data="cargo")]
        ])

    await message.answer(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —Ö–æ—Ç–∏—Ç–µ <b>–≤—ã—Å—Ç–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É</b> –∏–ª–∏ <b>–ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –≥—Ä—É–∑</b>?\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message(StateFilter(SearchState.search_date))
async def processSearchDate(message: Message, state: FSMContext):
    date = message.text
    if not validate_date(date):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await search_applications(message, "date", date)
    await state.clear()

@dp.message(StateFilter(SearchState.search_city))
async def processSearchCity(message: Message, state: FSMContext):
    city = message.text
    await search_applications(message, "city", city)
    await state.clear()

@dp.message(StateFilter(SearchState.search_type))
async def processSearchType(message: Message, state: FSMContext):
    type_car = message.text
    await search_applications(message, "type", type_car)
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
async def search_applications(message: Message, filter_type: str, filter_value: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    query = "SELECT * FROM applications"
    params = []
    if filter_type == "date":
        query += " WHERE upload_date = ?"
        params.append(filter_value)
    elif filter_type == "city":
        query += " WHERE cities LIKE ?"
        params.append(f"%{filter_value}%")
    elif filter_type == "type":
        query += " WHERE type_car = ?"
        params.append(filter_value)
    
    cursor.execute(query, params)
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
        return

    response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
    for row in rows:
        response += f"\n<b>ID:</b> {row[0]}\n"
        response += f"<b>–¢–∏–ø:</b> {row[1]}\n"
        response += f"<b>–ù–æ–º–µ—Ä:</b> {row[2]}\n"
        response += f"<b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {row[3]}\n"
        response += f"<b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {row[4]}\n"
        response += f"<b>–ì–æ—Ä–æ–¥–∞:</b> {row[5]}\n"
        response += f"<b>–¢–∏–ø –º–∞—à–∏–Ω—ã:</b> {row[6]}\n"
        response += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–æ–º–µ—Ä:</b> {row[7]}\n"
        response += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º—è:</b> {row[8]}\n"
        response += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä email:</b> {row[9]}\n"
    await message.answer(response, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É
@dp.callback_query(F.data == "back_to_start")
async def handleBackToStart(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await handleStart(callback.message, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞
@dp.callback_query(F.data.startswith("search_by_"))
async def handleSearchBy(callback: CallbackQuery, state: FSMContext):
    criterion = callback.data.replace("search_by_", "")
    logging.info(f"Selected criterion: {criterion}")  # –û—Ç–ª–∞–¥–∫–∞
    await callback.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ {criterion}:", show_alert=False)
    await callback.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ SearchState
    state_to_set = getattr(SearchState, f"search_{criterion}", None)
    if state_to_set:
        await state.set_state(state_to_set)
        logging.info(f"Set state to: {state_to_set}")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞.")
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.callback_query(F.data == "search_orders")
async def handleSearchOrders(callback: CallbackQuery):
    search_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="search_by_date")],
        [InlineKeyboardButton(text="üèô –ü–æ –≥–æ—Ä–æ–¥—É", callback_data="search_by_city")],
        [InlineKeyboardButton(text="üöö –ü–æ —Ç–∏–ø—É –º–∞—à–∏–Ω—ã", callback_data="search_by_type")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:", show_alert=False)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
        reply_markup=search_keyboard,
        parse_mode="HTML"
    )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞
@dp.callback_query(F.data.startswith("search_by_"))
async def handleSearchBy(callback: CallbackQuery, state: FSMContext):
    criterion = callback.data.replace("search_by_", "")
    await callback.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ {criterion}:", show_alert=False)
    await callback.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.set_state(f"search_{criterion}")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –ö–Ω–æ–ø–∫–∞ –ú–∞—à–∏–Ω–∞
@dp.callback_query(F.data == "car")
async def handleCar(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê123–ë–°77').")
    await state.set_state(CarState.number)

# FSM —à–∞–≥–∏ –¥–ª—è –º–∞—à–∏–Ω—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
@dp.message(CarState.number)
async def handleCarNumber(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025).")
    await state.set_state(CarState.upload_date)

@dp.message(CarState.upload_date)
async def handleCarUploadDate(message: Message, state: FSMContext):
    if not validate_date(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(upload_date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025).")
    await state.set_state(CarState.current_date)

@dp.message(CarState.current_date)
async def handleCarCurrentDate(message: Message, state: FSMContext):
    if not validate_date(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(current_date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥).")
    await state.set_state(CarState.cities)

@dp.message(CarState.cities)
async def handleCarCities(message: Message, state: FSMContext):
    await state.update_data(cities=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É—Ä–∞, –≥–∞–∑–µ–ª—å).")
    await state.set_state(CarState.type_car)

@dp.message(CarState.type_car)
async def handleCarTypeCar(message: Message, state: FSMContext):
    await state.update_data(type_car=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (+7XXXXXXXXXX, –Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890).")
    await state.set_state(CarState.manager_number)

@dp.message(CarState.manager_number)
async def handleCarManagerNumber(message: Message, state: FSMContext):
    if not validate_phone(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(manager_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).")
    await state.set_state(CarState.manager_name)

@dp.message(CarState.manager_name)
async def handleCarManagerName(message: Message, state: FSMContext):
    await state.update_data(manager_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ivan@example.com).")
    await state.set_state(CarState.manager_email)

@dp.message(CarState.manager_email)
async def handleCarManagerEmail(message: Message, state: FSMContext):
    await state.update_data(manager_email=message.text)
    data = await state.get_data()
    await state.update_data(ready_to_send=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    text = (
        f"üöó –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"<b>–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:</b> {data.get('number')}\n"
        f"<b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {data.get('upload_date')}\n"
        f"<b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {data.get('current_date')}\n"
        f"<b>–ì–æ—Ä–æ–¥–∞:</b> {data.get('cities')}\n"
        f"<b>–¢–∏–ø –º–∞—à–∏–Ω—ã:</b> {data.get('type_car')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–æ–º–µ—Ä:</b> {data.get('manager_number')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º—è:</b> {data.get('manager_name')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä email:</b> {data.get('manager_email')}\n"
        f"–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É."
    )
    await message.answer(text, reply_markup=keyboard_sendorno_users(), parse_mode="HTML")

# –ö–Ω–æ–ø–∫–∞ –ì—Ä—É–∑
@dp.callback_query(F.data == "cargo")
async def handleCargo(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ZA123').")
    await state.set_state(CargoState.number)

# FSM —à–∞–≥–∏ –¥–ª—è –≥—Ä—É–∑–∞
@dp.message(CargoState.number)
async def handleCargoNumber(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025).")
    await state.set_state(CargoState.upload_date)

@dp.message(CargoState.upload_date)
async def handleCargoUploadDate(message: Message, state: FSMContext):
    if not validate_date(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(upload_date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025).")
    await state.set_state(CargoState.current_date)

@dp.message(CargoState.current_date)
async def handleCargoCurrentDate(message: Message, state: FSMContext):
    if not validate_date(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.09.2025). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(current_date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥).")
    await state.set_state(CargoState.cities)

@dp.message(CargoState.cities)
async def handleCargoCities(message: Message, state: FSMContext):
    await state.update_data(cities=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É—Ä–∞, –≥–∞–∑–µ–ª—å).")
    await state.set_state(CargoState.type_car)

@dp.message(CargoState.type_car)
async def handleCarTypeCar(message: Message, state: FSMContext):
    await state.update_data(type_car=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (+7XXXXXXXXXX, –Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890).")
    await state.set_state(CargoState.manager_number)

@dp.message(CargoState.manager_number)
async def handleCargoManagerNumber(message: Message, state: FSMContext):
    if not validate_phone(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(manager_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).")
    await state.set_state(CargoState.manager_name)

@dp.message(CargoState.manager_name)
async def handleCargoManagerName(message: Message, state: FSMContext):
    await state.update_data(manager_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ivan@example.com).")
    await state.set_state(CargoState.manager_email)

@dp.message(CargoState.manager_email)
async def handleCargoManagerEmail(message: Message, state: FSMContext):
    await state.update_data(manager_email=message.text)
    data = await state.get_data()
    await state.update_data(ready_to_send=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    text = (
        f"üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data.get('number')}\n"
        f"<b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {data.get('upload_date')}\n"
        f"<b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {data.get('current_date')}\n"
        f"<b>–ì–æ—Ä–æ–¥–∞:</b> {data.get('cities')}\n"
        f"<b>–¢–∏–ø –º–∞—à–∏–Ω—ã:</b> {data.get('type_car')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–æ–º–µ—Ä:</b> {data.get('manager_number')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º—è:</b> {data.get('manager_name')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä email:</b> {data.get('manager_email')}\n"
        f"–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É."
    )
    await message.answer(text, reply_markup=keyboard_sendorno_users(), parse_mode="HTML")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É
@dp.callback_query(F.data == "send")
async def handleSend(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if not data.get("ready_to_send"):
        restart_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over")]
        ])
        await callback.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=restart_markup
        )
        return

    app_type = "car" if "CarState" in current_state else "cargo"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    app_id = add_application(data, user_id, app_type)

    if "CarState" in current_state:
        text = (
            f"üöó <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–∞—à–∏–Ω—É</b>\n\n"
            f"<b>–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:</b> {data.get('number')}\n"
            f"<b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {data.get('upload_date')}\n"
            f"<b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {data.get('current_date')}\n"
            f"<b>–ì–æ—Ä–æ–¥–∞:</b> {data.get('cities')}\n"
            f"<b>–¢–∏–ø –º–∞—à–∏–Ω—ã:</b> {data.get('type_car')}\n"
            f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–æ–º–µ—Ä:</b> {data.get('manager_number')}\n"
            f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º—è:</b> {data.get('manager_name')}\n"
            f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä email:</b> {data.get('manager_email')}"
        )
    else:
        text = (
            f"üì¶ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–∑</b>\n\n"
            f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data.get('number')}\n"
            f"<b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {data.get('upload_date')}\n"
            f"<b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {data.get('current_date')}\n"
            f"<b>–ì–æ—Ä–æ–¥–∞:</b> {data.get('cities')}\n"
            f"<b>–¢–∏–ø –º–∞—à–∏–Ω—ã:</b> {data.get('type_car')}\n"
            f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–æ–º–µ—Ä:</b> {data.get('manager_number')}\n"
            f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º—è:</b> {data.get('manager_name')}\n"
            f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä email:</b> {data.get('manager_email')}"
        )

    # –í—Ä–µ–º–µ–Ω–Ω—ã–π username (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    username = callback.from_user.username # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –ª–æ–≥–∏—Å—Ç–∞
    manager_id = ADMIN_ID[0] if ADMIN_ID and isinstance(ADMIN_ID[0], int) else None
    if not manager_id:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π manager_id. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        sent_msg = await callback.bot.send_message(
            chat_id=GROUP_ID,
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard_ingroup_users(manager_id, username)
        )
    except TelegramBadRequest as e:
        fallback_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data="reply")]
            ]
        )
        sent_msg = await callback.bot.send_message(
            chat_id=GROUP_ID,
            text=text,
            parse_mode="HTML",
            reply_markup=fallback_markup
        )
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}. –ö–Ω–æ–ø–∫–∞ '–ß–∞—Ç —Å –ª–æ–≥–∏—Å—Ç–æ–º' –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username.")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º app_id –∫–∞–∫ –∫–ª—é—á–∞
    applications[app_id] = {"message_id": sent_msg.message_id, **data}
    logging.info(f"Saved application: app_id={app_id}, message_id={sent_msg.message_id}, data={data}")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    await callback.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
@dp.callback_query(F.data == "start_over")
async def handleStartOver(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "üîÑ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ <b>–≤—ã—Å—Ç–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É</b> –∏–ª–∏ <b>–ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –≥—Ä—É–∑</b>?",
        reply_markup=keyboard_start_users(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É
@dp.callback_query(F.data == "reply")
async def handleReply(callback: CallbackQuery):
    responder = callback.from_user
    message_id = callback.message.message_id
    # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ message_id –≤ applications
    data = next((app_data for app_id, app_data in applications.items() if app_data.get("message_id") == message_id), {})
    app_id = data.get("app_id") if data else None

    if app_id:
        add_reply(app_id, responder.id, responder.full_name)

    text_to_manager = (
        f"üì¶ <b>–ù–æ–≤–∞—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"<b>–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã/–∑–∞–∫–∞–∑–∞:</b> {data.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {data.get('upload_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {data.get('current_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ì–æ—Ä–æ–¥–∞:</b> {data.get('cities', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–¢–∏–ø –º–∞—à–∏–Ω—ã:</b> {data.get('type_car', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–æ–º–µ—Ä:</b> {data.get('manager_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º—è:</b> {data.get('manager_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä email:</b> {data.get('manager_email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"üë§ <b>–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {responder.full_name} (ID: {responder.id})\n"
        f"<a href='tg://user?id={responder.id}'>–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>"
    )
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        logging.info(f"Attempting to send to ADMIN_ID: {ADMIN_ID[0]}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–∑ ADMIN_ID
        await bot.send_message(chat_id=ADMIN_ID[0], text=text_to_manager, parse_mode="HTML", disable_web_page_preview=True)
        await callback.answer("‚úÖ –í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
    except TelegramBadRequest as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(f"Failed to send to ADMIN_ID: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        await bot.send_message(chat_id=GROUP_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n{text_to_manager}", parse_mode="HTML")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
@dp.message(Command("search"))
async def handleSearch(message: Message):
    args = message.text.split()[1:]  # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /search
    filter_type = args[0] if args else None
    filter_value = args[1] if len(args) > 1 else None

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    query = "SELECT * FROM applications"
    params = []
    if filter_type and filter_value:
        if filter_type.lower() == "date":
            query += " WHERE upload_date = ?"
            params.append(filter_value)
        elif filter_type.lower() == "city":
            query += " WHERE cities LIKE ?"
            params.append(f"%{filter_value}%")
        elif filter_type.lower() == "type":
            query += " WHERE type_car = ?"
            params.append(filter_value)
    
    cursor.execute(query, params)
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
        return

    response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
    for row in rows:
        response += f"\n<b>ID:</b> {row[0]}\n"
        response += f"<b>–¢–∏–ø:</b> {row[1]}\n"
        response += f"<b>–ù–æ–º–µ—Ä:</b> {row[2]}\n"
        response += f"<b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {row[3]}\n"
        response += f"<b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {row[4]}\n"
        response += f"<b>–ì–æ—Ä–æ–¥–∞:</b> {row[5]}\n"
        response += f"<b>–¢–∏–ø –º–∞—à–∏–Ω—ã:</b> {row[6]}\n"
        response += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–æ–º–µ—Ä:</b> {row[7]}\n"
        response += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º—è:</b> {row[8]}\n"
        response += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä email:</b> {row[9]}\n"
    await message.answer(response, parse_mode="HTML")

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())